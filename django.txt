python3 --version
python3 -m venv venv
source venv/bin/activate
pip install django

git init
touch .gitignore

django-admin startproject mysite .
python3 manage.py runserver  
(why python3?, if we use python then it will think it’s python 2, if you have python 2 installed)
Python3 manage.py startapp food

# In view.py file
from django.http import HttpResponse

def index(request):
	return HttpResponse(’Hello World’)

#Function in view.py is called as view in django

#Create url.py file in food app
#In url.py we need to import views
from . import views
from dajngo.urls import path
urlpatterns = [
	path('', views.index, name ='index')
]

#Now we need to link the urls of food app to main app
from django.urls import  include
urlpatterns = [
    path('admin/', admin.site.urls),
    path('food/', include('food.urls')),
]


#Databases and model
Models are blueprint to create tables.
settings.py - DATBASES (It uses sql lite 3, you can configure any database here)


#Installed Apps
Some of these apps use database tables.

!Warning unapplied migrations
You have the apps which have database tables and you need to create tables
python manage.py migrate #apply migrations

migrate look at all the apps in Installed Apps and create tables for the models 
for the apps

from django.db import models
class Item(models.Model):
    item_name = models.CharField(max_length = 200)
    item_desc = models.CharField(max_length = 200)
    item_price = models.IntegerField()

migrate command go to installed apps and create tables for those apps
Go to installed apps
Go to you food apps.py
Class FoodConfig():
Copy this 
and go to Installed apps 
'food.apps.FoodConfig',

Now django understand food app exist

Whenever we make changes we need to convey that so we do that using
python manage.py makemigrations food
#Above syntax looks for all the database files or models and show the changes
#Now it looks at apps model and changes and update/creates the model
now we do
python manage.py sqlmigrate food 0001
#above syntax stays same regardless of teh database type
# This will convert the model into sql syntax so that you can see that
# sql is written correctly and ensure it is good before applying migration
python manage.py migrate 
# above will execute all unapplied migrations and actually modifies the database
#now database tables are ready

#Adding data
# Database Abstraction API
Create Object - Update Object - Delete Object

#python shell
>python manage.py shell
from food.models import Item
a = Item()
Item.object.all()
a = Item(item_name="Pizza",item_desc="Cheesy Pizza",item_price=20)
a.save()
a.id
a.pk
b = Item(item_name="Burger",item_desc="American burger",item_price=10)
b.save()
b.id
b.pk
Item.object.all()
# this gives query set but we need to make modification to show string name
# We need to do string representation

class Item(modelsmModel):

    def __str__(self):
        return self.item_name
    item_name = models.CharField(max_length = 200)
    item_desc = models.CharField(max_length = 200)
    item_price = models.IntegerField()

    Special (Double Underscore) Methods:

Methods like __str__ are sometimes called "dunder methods" (short for "double underscore").
They are used to define how objects behave with built-in operations (e.g., printing, adding, iterating).
You usually don't call these methods directly; instead, Python calls them in response to built-in functions or operations.

#python shell
>python manage.py shell
Item.object.all()


manage.py createsuperuser

# MYSITE/FOOD admin.py
from .models import Item
#register your model to show in admin
admin.stie.register(Item)

#Now you can login as super user and add or delete or edit items




#Show items on webapp
go to views.py
from .models import Item


def index(request):
    item_list = Item.objects.all()
    return HttpResponse(item_list)


# To style items
# Use templates
# Django templates

Settings.py
TEMPLATES - dajngo.templates #this is the template engine that is used

mkdir templates
cd templates
mkdir food
cd food

index.html
! hit enter
<h1> This is just a template </h1>

views.py
from djanog.template import loader

def index(request):
    item_list = Item.objects.all()
    template = loader.get_template('food/index.html)
    context = {

    }
    #return HttpResponse(item_list)
    return HttepResponse(template.render(context, request))

# Now lets show the data into the webpage using template
#Passing contexxt
index.html - erase and create new
{% for item in item_list%}
    {{ item.id }} -- {{ item.item_name}}
{% endfor %}


def index(request):
    item_list = Item.objects.all()
    template = loader.get_template('food/index.html)
    context = {
        'item_list':item_list,    
        #(comma at end is important)
    }
    #return HttpResponse(item_list)
    return HttepResponse(template.render(context, request))

index.html - erase and create new
{% for item in item_list%}
    <ul>
        <li>
            {{ item.id }} -- {{ item.item_name}}
        </li>
    </ul>
{% endfor %}


#Shortcut method and cleaner method of rendering templates using render directly
from django.shortcuts import render
def index(request):
    item_list = Item.objects.all()
     #template = loader.get_template('food/index.html)
     # not needed as the return is modified now to take care of it
    context = {
        'item_list':item_list,    
    }
    return render(request,'food/index.html',context)


#Template allow us to combine static part (html) with dynamic part (database)


# New view for description of each item
# We are passing item_id on to the detail webpage so passing this information
def detail(request, item_id):
    return HttpResponse("This is item id %s" % item_id)

# Now we need to link it to url
# Since we need dynamic url for each item we will let url know that
# we are expecting an integer value
urlpatterns = [
    path('', views.index, name='index'),
    path('<int:item_id>/', views.detail, name = 'detail'),
]
#whatever we pass as int as item_id will be passed to views.py detail method
def detail(request, item_id):
    return HttpResponse("This is item id %s" % item_id)

#test in url by :8000/food/1


# For us to show more information on detail view of item
# We need to pull information of item but unlike index view 
# we don't need to pull all the data we just need 1 item data
def detail(request, item_id):
    item = Item.objects.get(pk=item_id)
    context = {
        'item': item,
    }
    return HttpResponse("This is item id %s" % item_id)

#now that we have got context we need to pass it to template so 
# lets create detail.html template
#Now we need to create a template for detail
go into templates/food and create detail.html
<h1> {{ item.item_name}} </h1>
<h2> {{ item.item_desc}} </h2>
<h2> {{ item.item_price}} </h2>

#now lets modify the detail view to following
def detail(request, item_id):
    item = Item.objects.get(pk=item_id)
    context = {
        'item': item,
    }
    return render(request, 'food/detail.html', context)

#now try url food/1 and you would get detail view

#problem is that we don't need to manually add id in url do lets add that feature
# lets go to index.html file
{% for item in item_list%}
    <ul>
        <li>
            <a href="/food/{{item.id}}"> {{item.id}} -- {{ item.item_desc}}</a>
        </li>
    </ul>
{% endfor %}

# reason we need to remove hard coded url is bcoz using hard coded make it hardly coupled and make things less flexible
# if we keep using hard coded then handling the project will be complicated and not a good practice
# lets modigy the url and make it flexible

{% for item in item_list%}
    <ul>
        <li>
            <a href="{% url 'detail' item.id %}"> {{item.id}} -- {{ item.item_desc}}</a>
        </li>
    </ul>
{% endfor %}

# From {% url 'detail' %} it knows it needs to go to views.detail
urlpatterns = [
    path('', views.index, name='index'),
    path('<int:item_id>/', views.detail, name = 'detail'),
]

# since basic is clear and we repeated the practice of making another view and added to url lets beautify it 
DT - Django template language
We need tempalting engine like django templating enginer or jinja2
DTL have its own syntax basically like its own programming language
variable 
in DTL is between two curly brackets eg: {{ var }}
whenever we want to write a control flow logic
{% %} opening bracket

{% %} closing bracket



# Name spacing url
urls are present in food app which is in bigger project mysite
we might be working on food and our friend working on order might also have an app and has detail path
so now django will need to pick one out of two
so in this scenario we go and add folloiwng to food apps urls.py

app_name = 'food'

so now rather than jsut defining url as detail we use food.detail to avoid confusion

<a href={% url 'detail' item.id %}> {{ item.id}} -- {{ item.item_desc}}

below is right way of doing it

<a href={% url 'food:detail' item.id %}> {{ item.id}} -- {{ item.item_desc}}


#static files
lets create static folder similar to templates folder

mysite/food/static/food
images, javascript, css

add style.css
body{
    background-color: lightyellow;
}


modify index.html file
Add html boiler plate and add the code into the body
add link of style.css into head tag

< link rel="stylesheet", href="{% static 'food/style.css %}>

#below is the code of index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Food Items</title>
    <link rel="stylesheet" href="{% static 'food/style.css' %}">
</head>
<body>
    {% for item in item_list %}
        <ul>
            <li>
                <a href="{% url 'food:detail' item.id %}">{{ item.id }} -- {{ item.item_desc }}</a>
            </li>
        </ul>
    {% endfor %}
</body>
</html>


add following at the top to html file to load the css
{% load static %}

How Django knows where the static files are
Installed Apps - django.contrib.staticfiles
This is the exact same app which allows us to use static files which we have in our django

Settings.py file knows where the static files are located
STATIC_URL = '/static/'
you can configure this path for static files.


# Creating Navigation bar for website
# This has nothign to do with django
# Its html, css, jv using framework called bootstrap
# This is static part of website and django will handle the dynamic part of website
# Intent here is to know how static part will interact with dynamic part
# Bootstrap - Like django its a framework but its for front end, helps us create things easily rather than writing code by ourself
# CDN bootstrap - Content delivery network

<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
  rel="stylesheet"
  integrity="sha384-9ndCyUa6zE+3f52t8S3gBsq41tkj7NQyl0KXwv+I0TtMBo+YdpHrc/tK4JVOBl1W"
  crossorigin="anonymous"
/>
simply go and paste following in the head of the index.html

To ensure bootstrap is working hit refresh and font of text will change because of bootstrap cdn link

Now in index.html we will create nav bar inside <body>
# you can manually design the style manually in css or use bootstrap
<nav class="navbar navbar-dark bg-dark">
    <a href="#" class="navbar-brand">Food App</a>

    <div class="navbar">
        <a class="nav-item" href="#">Add Item</a>
        <a class="nav-item" href="#">Delete Item</a>
        <a class="nav-item" href="#">View Item</a>
    </div>
</nav>


you can improve by adding following
<nav class="navbar navbar-dark bg-dark">
    <a href="#" class="navbar-brand">Food App</a>

    <div class="navbar">
        <a class="nav-item nav-link" href="#">Add Item</a>
        <a class="nav-item nav-link" href="#">Delete Item</a>
        <a class="nav-item nav-link" href="#">View Item</a>
    </div>
</nav>

# ISSUE - This navbar only appears on index.html but not on other webpages
How to add this navigation bar in detail file
You can copy paste so that is not a good practice.
Goes again common software engineering practice i.e. to avoid repetition of code

base.html template
it will contain all the code taht will be applied to all the other webpages

template/food/base.html
Get the head of file for style and add into head
Copy paste navigation bar into body tag

    <nav class="navbar navbar-dark bg-dark">
        <a href="#" class="navbar-brand">Food App</a>

        <div class="navbar">
            <a class="nav-item nav-link" href="#">Add Item</a>
            <a class="nav-item nav-link" href="#">Delete Item</a>
            <a class="nav-item nav-link" href="#">View Item</a>
        </div>
    </nav>

    {%block body %}
    {% endblock %}

</body>

Now we need to learn how to import into index.html




